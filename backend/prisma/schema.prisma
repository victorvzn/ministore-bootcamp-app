// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USER_ROLE {
  APP_ADMIN
  APP_STAFF

  ENTERPRISE_ADMIN
  ENTERPRISE_STAFF
  ENTERPRISE_CUSTOMER
}

enum SUBSCRIPTION_STATUS {
  ACTIVED // Activada
  ON_HOLD // En espera
  CANCELED // Cancelada
  AUTO_RENEWED // Renovación automática
}

enum MEMBERSHIP_ROLE {
  OWNER
  MEMBER
}

model Enterprise {
  id String @id @default(cuid())

  name        String  @unique()
  image       String?
  address     String?
  phoneNumber String? @map("phone_number")

  domain String @unique()

  active    Boolean?  @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  subscriptions Subscription[]
  memberships   Membership[]
  categories      Category[]
  products       Product[]
  ordersHeaders   OrdersHeader[]
  ordersDetails   ordersDetail[]

  @@map("enterprises")
}

model User {
  id String @id @default(cuid())

  firstname   String
  lastname    String
  phoneNumber String? @unique @map("phone_number")
  address     String?

  email    String @unique
  password String

  role USER_ROLE @default(ENTERPRISE_CUSTOMER)

  emailVerified Boolean @default(false) @map("email_verified")

  active    Boolean?  @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  ordersHeaders OrdersHeader[]
  ordersDetails ordersDetail[]
  memberships Membership[]

  @@map("users")
}

model Membership {
  id String @id @default(cuid())

  role MEMBERSHIP_ROLE

  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])
  enterpriseId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("memberships")
}

model OrdersHeader {
  id String @id @default(cuid())

  series String
  number String
  total  Float

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  enterprise   Enterprise? @relation(fields: [enterpriseId], references: [id])
  enterpriseId String      @map("enterprise_id")

  @@map("orders_header")
}

model ordersDetail {
  id String @id @default(cuid())

  quantity Int
  size     Int
  color    Int

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  ordersHeader   User   @relation(fields: [ordersHeaderId], references: [id])
  ordersHeaderId String @map("order_header_id")

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  enterprise   Enterprise? @relation(fields: [enterpriseId], references: [id])
  enterpriseId String      @map("enterprise_id")

  @@map("orders_detail")
}

model Product {
  id String @id @default(cuid())

  name               String
  description        String?
  code               String?
  price              Float
  discountPercentage Float   @default(0.00) @map("discount_percentage")
  stock              Int     @default(0)
  brand              String?
  thumbnail          String?

  images String[] @default([])
  sizes  String[] @default([])
  colors String[] @default([])

  published Boolean?  @default(false)
  active    Boolean?  @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String    @map("category_id")

  enterprise   Enterprise? @relation(fields: [enterpriseId], references: [id])
  enterpriseId String      @map("enterprise_id")

  ordersDetail ordersDetail[]

  @@unique([name, price, categoryId])
  @@map("products")
}

model Category {
  id String @id @default(cuid())

  name String

  active    Boolean?  @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  enterprise   Enterprise? @relation(fields: [enterpriseId], references: [id])
  enterpriseId String      @map("enterprise_id")

  products Product[]

  @@map("categories")
}

model Subscription {
  id String @id @default(cuid())

  trialStart    DateTime @map("trial_start")
  trialEnd      DateTime @map("trial_end")
  trialDuration Int      @map("trial_duration")

  subsStart     DateTime? @map("subs_start")
  subsEnd       DateTime? @map("subs_end")
  subsdDuration Int       @default(0) @map("subs_duration")

  status    SUBSCRIPTION_STATUS @default(ON_HOLD)
  createdAt DateTime            @default(now()) @map("created_at")
  updatedAt DateTime            @updatedAt

  plan   Plan   @relation(fields: [planId], references: [id])
  planId String @map("plan_id")

  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])
  enterpriseId String     @map("enterprise_id")

  @@map("subscriptions")
}

model Plan {
  id String @id @default(cuid())

  name        String
  description String
  price       Float
  duration    Int

  active    Boolean?  @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  subscriptions Subscription[]

  @@map("plans")
}
